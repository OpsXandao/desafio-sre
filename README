Objetivo: Criar e aplicar uma solução para provisionar uma instalação do WordPress com alta disponibilidade (HA) na AWS, utilizando serviços como Auto Scaling, EFS, Load Balancer, RDS, Elasticache(Memcached) e demais serviços necessários para tal funcionamento. Uma instância EC2 privada com Docker rodando uma aplicação "Hello World" e um servidor OpenVPN com Pritunl para acesso seguro à instância EC2 privada. A solução deve trazer alta disponibilidade, segurança, otimização de desempenho e conectividade segura à infraestrutura privada.

Descrição da Tarefa
Você deve implementar uma aplicação WordPress em alta disponibilidade na AWS. Além disso, deve ser provisionada uma instância EC2 separada do Auto Scaling, rodando uma aplicação "Hello World" em uma sub-rede privada. Um servidor VPN baseado em OpenVPN (Pritunl) deve ser configurado para que a instância privada seja acessada de forma segura.
Utilize os seguintes recursos:
    • Auto Scaling: Para garantir que o WordPress seja escalável automaticamente de acordo com a demanda.
    • EFS (Elastic File System): Para o armazenamento compartilhado dos arquivos de mídia do WordPress entre as instâncias.
    • RDS (Relational Database Service): Para o banco de dados MySQL, proporcionando um ambiente gerenciado, seguro e redundante.
    • Load Balancer: Para distribuir o tráfego de rede entre as instâncias EC2 que rodarão o WordPress, garantindo alta disponibilidade.
    • Memcached: Para armazenamento das sessões dos usuários.
    • EC2 Privada com Docker: Uma instância EC2 isolada do Auto Scaling, rodando um container Docker com uma aplicação "Hello World", isso irá simular como se tivessemos 2 aplicações diferentes no ambiente (uma sendo o wordpress e outra sendo essa)
    • Servidor VPN Pritunl: Para garantir conectividade segura com a instância EC2 privada via VPN.

Requisitos Técnicos
1. Instâncias EC2 e Auto Scaling
    • Configure um grupo de Auto Scaling para as instâncias que rodarão o WordPress.
    • O grupo de Auto Scaling deve ser configurado para escalar dinamicamente, com base no uso de CPU.
    • As instâncias devem ter o WordPress funcional.
2. EFS (Elastic File System)
    • Configure um sistema de arquivos EFS que será compartilhado entre todas as instâncias EC2.
    • Monte o EFS nas instâncias EC2 para que os diretórios de upload do WordPress estejam centralizados e acessíveis por todas as instâncias.
3. RDS (Relational Database Service)
    • Crie uma instância do RDS utilizando MySQL. A base de dados será usada pelo WordPress para armazenar dados.
    • A instância RDS deve estar configurada para alta disponibilidade (Multi-AZ).
    • Garanta que o acesso ao banco de dados seja seguro, utilizando Security Groups e regras apropriadas de rede.
4. Elastic Load Balancer (ELB)
    • Configure um Load Balancer (Application Load Balancer - ALB) para distribuir o tráfego de rede entre as instâncias EC2.
    • O Load Balancer deve garantir a distribuição de carga de forma eficiente, encaminhando o tráfego HTTP/HTTPS.
    • Configure a verificação de saúde (health check) para garantir que o tráfego só seja direcionado para instâncias saudáveis.
5. Memcached
    • Configure o Amazon ElastiCache for Memcached para cachear queries ao banco de dados, reduzindo a carga sobre o MySQL.
    • As instâncias EC2 devem ser configuradas para se conectarem ao cluster Memcached, otimizando as consultas do WordPress.
    • Garanta que a configuração do WordPress utilize o Memcached como mecanismo de cache.
6. Instância EC2 Privada com Docker
    • Crie uma instância EC2 em uma sub-rede privada. Esta instância não deve fazer parte do grupo de Auto Scaling.
    • Instale o Docker nesta instância e configure-a para rodar um container com a aplicação "Hello World" (uma aplicação simples que retorna um texto "Hello World" em um servidor web).
    • O container Docker deve estar disponível apenas internamente dentro da rede privada.
7. Servidor OpenVPN com Pritunl
    • Crie uma instância EC2 pública que será utilizada como servidor VPN.
    • Instale e configure o Pritunl como servidor OpenVPN para permitir que administradores e desenvolvedores conectem-se de forma segura à VPC e acessem a instância EC2 privada com Docker.
    • Acesse o Pritunl através da interface web, configure a VPN e crie perfis de usuários para acessar a rede privada.
8. Segurança e Redes
    • Configure as instâncias EC2, EFS, RDS e Memcached em sub-redes privadas e públicas conforme necessário.
    • Utilize Security Groups para controlar o acesso entre os serviços, permitindo apenas conexões internas seguras entre EC2, RDS e Memcached.
    • A instância EC2 privada com Docker deve ser acessada via VPN, configurando o Security Group para permitir o tráfego proveniente da sub-rede onde o servidor Pritunl está rodando.
9. Monitoramento
    • Configure o Amazon CloudWatch para monitorar métricas importantes, como a utilização de CPU nas instâncias EC2, uso de memória em Memcached, utilização do RDS e disponibilidade da instância EC2 privada com Docker.
    • Configure alarmes para Auto Scaling, baseado em thresholds específicos de CPU ou latência de requisições.
10. Documentação
    • Escreva um resumo detalhado da solução, explicando os passos tomados, as decisões de arquitetura e como a solução atende os requisitos de alta disponibilidade, escalabilidade, otimização de desempenho com cache e a implementação do Docker em uma instância privada com acesso via VPN.
